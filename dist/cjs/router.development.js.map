{"version":3,"file":"router.development.js","sources":["../../src/index.ts","../../src/router.ts"],"sourcesContent":["function parse(str: string): {\n  keys: string[];\n  pattern: RegExp;\n} {\n  const keys: string[] = [];\n\n  return {\n    keys,\n    pattern: new RegExp(\n      `${(str[0] === \"/\" ? str.slice(1) : str)\n        .split(\"/\")\n        .reduce((pattern, part) => {\n          if (part === \"*\") {\n            // biome-ignore lint/style/noParameterAssign: <explanation>\n            pattern += \"/(?:.*)\";\n          } else if (part[0] === \":\") {\n            const optionally = part[part.length - 1] === \"?\";\n            // biome-ignore lint/style/noParameterAssign: <explanation>\n            pattern += optionally ? \"(?:/([^/]+?))?\" : \"/([^/]+?)\";\n            keys.push(\n              part.slice(1, optionally ? part.length - 1 : part.length),\n            );\n          } else {\n            // biome-ignore lint/style/noParameterAssign: <explanation>\n            pattern += `/${escapeRegExp(part)}`;\n          }\n\n          return pattern;\n        })}/?$`,\n      \"i\",\n    ),\n  };\n}\n\nfunction escapeRegExp(str: string): string {\n  return str.replace(/[\\\\\\*\\+\\.\\?\\{\\}\\(\\)\\[\\]\\^\\$\\-\\|\\/]/g, \"\\\\$&\");\n}\n\nexport { parse };\n","// Pattern's parser\nimport { parse } from \".\";\n\n/**\n * Router using RegExp.\n */\nclass Router<T> {\n  #routes: Record<\n    string,\n    {\n      pattern: {\n        keys: string[];\n        pattern: RegExp;\n      };\n      handlers: T[];\n    }[]\n  >;\n  constructor() {\n    this.#routes = Object.create(null);\n    this.#routes.ALL = [];\n  }\n  add(method: string, path: string, ...handlers: T[]) {\n    const pattern = parse(path);\n    const info = { pattern, handlers };\n    if (method === \"ALL\") {\n      const keys = Object.keys(this.#routes);\n      for (let i = 0; i < keys.length; ++i) {\n        this.#routes[keys[i]].push(info);\n      }\n    } else {\n      if (typeof this.#routes[method] === \"undefined\") {\n        this.#routes[method] = this.#routes.ALL.slice();\n      }\n      this.#routes[method].push(info);\n    }\n  }\n  match(\n    method: string,\n    path: string,\n  ): {\n    handlers: T[];\n    params: Record<string, string>;\n  } | null {\n    const handlers = [];\n    const params = Object.create(null);\n    const target = this.#routes[method] ?? this.#routes.ALL;\n    for (let i = 0; i < target.length; ++i) {\n      const {\n        pattern: { pattern, keys },\n        handlers: targetHandler,\n      } = target[i];\n      if (pattern.test(path)) {\n        handlers.push(...targetHandler);\n        const match = pattern.exec(path);\n        if (match !== null) {\n          for (let j = 0; j < keys.length; ++j) {\n            params[keys[j]] = match[j + 1];\n          }\n        }\n      }\n    }\n    if (handlers.length !== 0) {\n      return {\n        handlers: handlers,\n        params: params,\n      };\n    }\n    return null;\n  }\n}\n\nexport { Router };\n"],"names":["parse","str","keys","pattern","RegExp","slice","split","reduce","part","optionally","length","push","escapeRegExp","replace","Router","constructor","Object","create","ALL","add","method","path","handlers","info","i","match","params","target","targetHandler","test","exec","j"],"mappings":"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"}